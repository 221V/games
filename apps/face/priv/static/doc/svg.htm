<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<html>
<head>
<link href="synrc.css" type="text/css" rel="stylesheet">
</head>
<body border=0>

<div class="threecol">

<div class="left">
<div class="hints"></div>
<div class="main">

<h1>Full SVG Application</h1>

<h2>Abstract</h2>

<p>Основна ідея мати чистий SVG фреймворк що усі елементи були однотипними,
і підхід був уніфікований, кнопки будь якого розміру, форми і які легко
було би змінити в майбутньому. HTML/CSS підхід в подальшому не даcть
змогу легко замінити контрольні елементи, карти і таке інше, доведеть
повністью розбирати CSS елементи і верску. Уявіть що ми захочемо в
майбутньому просто відкрити SVG у векторному редакторі, перемалювати
і зберегти з тими самими element ID. У випадку з CSS при зміні дизайну ми
постійно будемо змушені пестворювати верстку, знову наймати одноразову ручну роботу.
У випадку з SVG нам доведеться тільки замінити елементи SVG.</P>

<h2>SVG Integration Process</h2>

<p>Підхід який пропонується нагадуеє уніфіковану роботу з векторними
XML елементами, як це є в WPF наприклад. Тут справа не в байтах, в
інтеграції процессу між дизайнерами, розробниками, верстальниками і
серверними програмістами. Як наприклад Expression Blend у Microsoft для WPF.
Саме з цих міркувань була вибрана технологія SVG.</p>

<h2>SVG DOM Control</h2>

<p>Інша частина це інтеграція SVG DOM і управління ним на сервері.
Ми хочемо мати можливість модифікувати SVG DOM з сервера. Для цього
нам потрібно прозорий та уніфікований підхід до усіх елементів.
Це дасть нам змогу використовувати підхід як товстого (гра повністю в браузері),
так і тонкого клієнту (коли стан гри повнітю контролюється сервером).</p>

<h2>Sample Client</h2>

<p>Прототип тонкого клієнту на елементах HTML/CSS викладений тут:<p>

<code><a href="http://srv5.kakaranet.com:8080">http://srv5.kakaranet.com:8080</a></code>

</div>

<div class="contents">
<iframe src="contents.htm" frameborder=0 width=340 height=2190></iframe>
</div>

</div>


</body>
</html>
